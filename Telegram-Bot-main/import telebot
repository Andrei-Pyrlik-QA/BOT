import telebot
from telebot import types
import random

TOKEN = "7197882427:AAFdI41fbrB0OuAlxDW2DV8qWGsSacyPtF8"
bot = telebot.TeleBot(TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
waiting_for_name = {}
waiting_for_greeting_response = {}
waiting_for_animal_answer = {}
waiting_for_specific_animal = {}
waiting_for_animal_name = {}
waiting_for_user_favorite_game = {}
waiting_for_gta_activity = {}
waiting_for_ninja_turtle_confirmation = {}
waiting_for_ninja_turtle_name = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–≥—Ä
number_game_active = {}
number_game_attempts = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ –∫–∞—Ç–∞–Ω–∏–∏
waiting_for_user_transport = {}
waiting_for_skate_type = {}
waiting_for_tricks_attempt = {}
waiting_for_tricks_desire = {}

# –ó–∞–≥–∞–¥–∫–∏
RIDDLES = [
    {
        "question": "–ó–∏–º–æ–π –∏ –ª–µ—Ç–æ–º –æ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º. –ß—Ç–æ —ç—Ç–æ?",
        "options": ["–°–Ω–µ–≥", "–ï–ª–∫–∞", "–¢—Ä–∞–≤–∞", "–ù–µ–±–æ"],
        "correct": 1
    },
    # ... –¥—Ä—É–≥–∏–µ –∑–∞–≥–∞–¥–∫–∏ ...
]

STANDARD_QUESTIONS = {
    "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?": lambda msg: bot.send_message(msg.chat.id, "–ú–µ–Ω—è –∑–æ–≤—É—Ç TestBot. –ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=None),
    "–ß—Ç–æ —Ç—ã –ª—é–±–∏—à—å –¥–µ–ª–∞—Ç—å?": lambda msg: bot.send_message(msg.chat.id, "–õ—é–±–ª—é –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."),
    "–ö–∞–∫–∏–µ —Ç–≤–æ–∏ –ª—é–±–∏–º—ã–µ –∏–≥—Ä—ã?": lambda msg: handle_favorite_games(msg),
    "–ù–∞ —á—ë–º —Ç—ã –ª—é–±–∏—à—å –∫–∞—Ç–∞—Ç—å—Å—è?": lambda msg: handle_transport_question(msg),
    "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –¥–æ–º–∞—à–Ω–µ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?": lambda msg: handle_pets(msg),
    "–¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è": lambda msg: show_multiplication_menu(msg),
    "üéÆ –ò–≥—Ä—ã": lambda msg: show_games_menu(msg),
}

def get_correct_form(animal):
    exceptions = {
        '—á–µ—Ä–µ–ø–∞—Ö–∞': '—á–µ—Ä–µ–ø–∞—Ö—É',
        '—Å–æ–±–∞–∫–∞': '—Å–æ–±–∞–∫—É',
        # ... –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è ...
    }
    return exceptions.get(animal.lower(), animal.lower())

def create_keyboard(buttons):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for button in buttons:
        markup.add(types.KeyboardButton(button))
    return markup

def create_inline_keyboard(buttons_data):
    markup = types.InlineKeyboardMarkup()
    for button_text, callback_data in buttons_data:
        markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    return markup

def show_multiplication_menu(msg):
    numbers = [str(i) for i in range(1, 11)]
    markup = create_keyboard(numbers + ["üîô –ù–∞–∑–∞–¥"])
    bot.send_message(
        msg.chat.id,
        "–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —É–º–Ω–æ–∂–µ–Ω–∏—è (1-10):",
        reply_markup=markup
    )

def show_multiplication_table(chat_id, number):
    table = f"‚ú® –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ {number} ‚ú®\n\n"
    for i in range(1, 11):
        table += f"{number} √ó {i} = {number * i}\n"
    
    markup = create_keyboard(["–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–∞–±–ª–∏—Ü—É", "üîô –ù–∞–∑–∞–¥"])
    bot.send_message(chat_id, table, reply_markup=markup)

def show_games_menu(msg):
    games_buttons = [
        ("üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", "game_number"),
        ("üß© –ó–∞–≥–∞–¥–∫–∏", "game_riddles"),
        ("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_main")
    ]
    markup = create_inline_keyboard(games_buttons)
    bot.send_message(msg.chat.id, "üéÆ –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup=markup)

# ... [–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π] ...

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî TestBot. –ù–∞—á–Ω–µ–º –Ω–∞—à–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ?",
        reply_markup=create_keyboard(STANDARD_QUESTIONS.keys())
    )

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
ü§ñ **TestBot - –ü–æ–º–æ—â—å**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å
‚Ä¢ /restart ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
‚Ä¢ /games ‚Äî –º–µ–Ω—é –∏–≥—Ä

**–§—É–Ω–∫—Ü–∏–∏:**
üî¢ –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è
üéÆ –ò–≥—Ä—ã: –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ, –ó–∞–≥–∞–¥–∫–∏
üê¢ –û–±—â–µ–Ω–∏–µ –æ –ø–∏—Ç–æ–º—Ü–∞—Ö
"""
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

# ... [–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥] ...

@bot.message_handler(content_types=["text"])
def handle_any_message(message):
    chat_id = message.chat.id

    if chat_id in number_game_active:
        process_number_guess(message)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —É–º–Ω–æ–∂–µ–Ω–∏—è
    if message.text.isdigit() and 1 <= int(message.text) <= 10:
        show_multiplication_table(chat_id, int(message.text))
    elif message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–∞–±–ª–∏—Ü—É":
        show_multiplication_menu(message)
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=create_keyboard(STANDARD_QUESTIONS.keys())
        )
    
    # [–æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...]
    elif message.text in STANDARD_QUESTIONS:
        handler = STANDARD_QUESTIONS[message.text]
        handler(message)
    else:
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:",
            reply_markup=create_keyboard(STANDARD_QUESTIONS.keys())
        )

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    bot.polling(none_stop=True)