import telebot
from telebot import types
import random

TOKEN = "YOUR_TELEGRAM_BOT_TOKEN_HERE"
bot = telebot.TeleBot(TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
waiting_for_name = {}
waiting_for_greeting_response = {}
waiting_for_animal_answer = {}
waiting_for_specific_animal = {}
waiting_for_animal_name = {}
# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ–± –∏–≥—Ä–∞—Ö
waiting_for_user_favorite_game = {}  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª—é–±–∏–º–æ–π –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
waiting_for_gta_activity = {}  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —á—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å –≤ GTA
# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–≥—Ä
number_game_active = {}  # {chat_id: target_number}
number_game_attempts = {}  # {chat_id: attempts_count}

# –ó–∞–≥–∞–¥–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
RIDDLES = [
    {
        "question": "–ó–∏–º–æ–π –∏ –ª–µ—Ç–æ–º –æ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º. –ß—Ç–æ —ç—Ç–æ?",
        "options": ["–°–Ω–µ–≥", "–ï–ª–∫–∞", "–¢—Ä–∞–≤–∞", "–ù–µ–±–æ"],
        "correct": 1  # –ò–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
    },
    {
        "question": "–ë–µ–∑ —Ä—É–∫, –±–µ–∑ –Ω–æ–≥, –∞ –≤–æ—Ä–æ—Ç–∞ –æ—Ç–≤–æ—Ä—è–µ—Ç. –ß—Ç–æ —ç—Ç–æ?",
        "options": ["–í–µ—Ç–µ—Ä", "–î–æ–∂–¥—å", "–°–æ–ª–Ω—Ü–µ", "–°–æ–±–∞–∫–∞"],
        "correct": 0
    },
    {
        "question": "–ß—Ç–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏?",
        "options": ["–°–≤–µ—Ç", "–°–æ–Ω", "–¢–µ–º–Ω–æ—Ç—É", "–ó–≤–µ–∑–¥—ã"],
        "correct": 1
    },
    {
        "question": "–£ –∫–æ–≥–æ –µ—Å—Ç—å —à–ª—è–ø–∞ –±–µ–∑ –≥–æ–ª–æ–≤—ã –∏ –Ω–æ–≥–∞ –±–µ–∑ —Å–∞–ø–æ–≥–∞?",
        "options": ["–ü—É–≥–∞–ª–æ", "–ì—Ä–∏–±", "–°—Ç—É–ª", "–î–µ—Ä–µ–≤–æ"],
        "correct": 1
    },
    {
        "question": "–ß—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ, –µ—Å–ª–∏ –µ–≥–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–≤–µ—Ä—Ö –Ω–æ–≥–∞–º–∏?",
        "options": ["–°—Ç–∞–∫–∞–Ω", "–¶–∏—Ñ—Ä–∞ 6", "–î–æ–º", "–ß–µ–ª–æ–≤–µ–∫"],
        "correct": 1
    }
]

STANDARD_QUESTIONS = {
    "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?": lambda msg: bot.send_message(msg.chat.id, "–ú–µ–Ω—è –∑–æ–≤—É—Ç TestBot. –ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=None),
    "–ß—Ç–æ —Ç—ã –ª—é–±–∏—à—å –¥–µ–ª–∞—Ç—å?": lambda msg: bot.send_message(msg.chat.id, "–õ—é–±–ª—é –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."),
    "–ö–∞–∫–∏–µ —Ç–≤–æ–∏ –ª—é–±–∏–º—ã–µ –∏–≥—Ä—ã?": lambda msg: handle_favorite_games(msg),
    "–ù–∞ —á—ë–º —Ç—ã –ª—é–±–∏—à—å –∫–∞—Ç–∞—Ç—å—Å—è?": lambda msg: bot.send_message(msg.chat.id, "–Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –ø–æ –≥–æ—Ä–æ–¥—Å–∫–∏–º —É–ª–∏—Ü–∞–º."),
    "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –¥–æ–º–∞—à–Ω–µ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?": lambda msg: handle_pets(msg),
    "–ö–∞–∫ –¥–µ–ª–∞?": lambda msg: bot.send_message(msg.chat.id, "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è –∫–∞–∫ –¥–µ–ª–∞?", reply_markup=None),
    "üéÆ –ò–≥—Ä—ã": lambda msg: show_games_menu(msg),
}

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(buttons):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for button in buttons:
        markup.add(types.KeyboardButton(button))
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_inline_keyboard(buttons_data):
    markup = types.InlineKeyboardMarkup()
    for button_text, callback_data in buttons_data:
        markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    return markup

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–≥—Ä
def show_games_menu(msg):
    games_buttons = [
        ("üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", "game_number"),
        ("üß© –ó–∞–≥–∞–¥–∫–∏", "game_riddles"),
        ("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_main")
    ]
    markup = create_inline_keyboard(games_buttons)
    bot.send_message(msg.chat.id, "üéÆ –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup=markup)

# –ù–∞—á–∞—Ç—å –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
def start_number_game(chat_id):
    target_number = random.randint(1, 100)
    number_game_active[chat_id] = target_number
    number_game_attempts[chat_id] = 0
    
    bot.send_message(
        chat_id, 
        "üî¢ –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!\n–£ —Ç–µ–±—è –µ—Å—Ç—å 7 –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ
def process_number_guess(message):
    chat_id = message.chat.id
    try:
        guess = int(message.text)
        target = number_game_active[chat_id]
        attempts = number_game_attempts[chat_id] + 1
        number_game_attempts[chat_id] = attempts
        
        if guess == target:
            bot.send_message(
                chat_id, 
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {target} —Å {attempts} –ø–æ–ø—ã—Ç–∫–∏!\n\n"
                "–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë?",
                reply_markup=create_inline_keyboard([
                    ("üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", "game_number"),
                    ("üîô –í –º–µ–Ω—é –∏–≥—Ä", "games_menu")
                ])
            )
            number_game_active.pop(chat_id, None)
            number_game_attempts.pop(chat_id, None)
        elif attempts >= 7:
            bot.send_message(
                chat_id,
                f"üòî –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ {target}.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?",
                reply_markup=create_inline_keyboard([
                    ("üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", "game_number"),
                    ("üîô –í –º–µ–Ω—é –∏–≥—Ä", "games_menu")
                ])
            )
            number_game_active.pop(chat_id, None)
            number_game_attempts.pop(chat_id, None)
        elif guess < target:
            bot.send_message(
                chat_id, 
                f"üìà –ë–æ–ª—å—à–µ! –ü–æ–ø—ã—Ç–∫–∞ {attempts}/7"
            )
        else:
            bot.send_message(
                chat_id, 
                f"üìâ –ú–µ–Ω—å—à–µ! –ü–æ–ø—ã—Ç–∫–∞ {attempts}/7"
            )
    except ValueError:
        bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!")

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–≥–∞–¥–∫—É
def show_random_riddle(chat_id):
    riddle = random.choice(RIDDLES)
    riddle_buttons = []
    
    for i, option in enumerate(riddle["options"]):
        riddle_buttons.append((option, f"riddle_{i}_{riddle['correct']}"))
    
    markup = create_inline_keyboard(riddle_buttons + [("üîô –í –º–µ–Ω—é –∏–≥—Ä", "games_menu")])
    bot.send_message(chat_id, f"üß© –ó–∞–≥–∞–¥–∫–∞:\n\n{riddle['question']}", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –ª—é–±–∏–º—ã—Ö –∏–≥—Ä–∞—Ö
def handle_favorite_games(msg):
    bot.send_message(msg.chat.id, "–ú–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞ ‚Äî 'StarCraft II', –ª—é–±–ª—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")
    follow_up_question = "–ê –∫–∞–∫–∞—è —É —Ç–µ–±—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?"
    bot.send_message(msg.chat.id, follow_up_question)
    waiting_for_user_favorite_game[msg.chat.id] = True  # –û–∂–∏–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–∏–º–æ–π –∏–≥—Ä—ã

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –ª—é–±–∏–º–æ–π –∏–≥—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def process_user_favorite_game(message):
    user_game = message.text.strip()
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ GTA –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–≥—Ä—ã
    if "gta" in user_game.lower() or "–≥—Ç–∞" in user_game.lower():
        response = f"{user_game} ‚Äî –æ—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞! –Ø –ª—é–±–ª—é –≥–æ–Ω—è—Ç—å –Ω–∞ –º–∞—à–∏–Ω–∞—Ö –≤ —ç—Ç–æ–π –∏–≥—Ä–µ, –∞ —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–∞–º –¥–µ–ª–∞—Ç—å?"
        bot.send_message(chat_id, response)
        waiting_for_user_favorite_game.pop(chat_id, None)  # –ë–æ–ª—å—à–µ –Ω–µ –æ–∂–∏–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        waiting_for_gta_activity[chat_id] = True  # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å –≤ GTA
    else:
        response = f"{user_game} ‚Äî –ø–æ—Ç—Ä—è—Å–∞—é—â–∞—è –∏–≥—Ä–∞! üéÆ"
        bot.send_message(chat_id, response)
        waiting_for_user_favorite_game.pop(chat_id, None)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ GTA
def process_gta_activity(message):
    user_activity = message.text.strip()
    chat_id = message.chat.id
    response = "–ù–µ–ø–ª–æ—Ö–æ! üëç"
    bot.send_message(chat_id, response)
    waiting_for_gta_activity.pop(chat_id, None)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
def handle_pets(msg):
    bot.send_message(msg.chat.id, "–ù–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö, –Ω–æ –µ—Å–ª–∏ –±—ã –±—ã–ª–∏, –≤—ã–±—Ä–∞–ª –±—ã –∫–æ—Ç–∞.")
    follow_up_question = "–ê —É —Ç–µ–±—è –µ—Å—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ?"
    bot.send_message(msg.chat.id, follow_up_question)
    waiting_for_animal_answer[msg.chat.id] = True

def process_animal_response(message):
    user_answer = message.text.lower().strip()
    chat_id = message.chat.id
    
    if user_answer.startswith('–¥–∞'):
        follow_up_question = "–ö–∞–∫–æ–µ —É —Ç–µ–±—è –∂–∏–≤–æ—Ç–Ω–æ–µ?"
        bot.send_message(chat_id, follow_up_question)
        waiting_for_animal_answer.pop(chat_id, None)
        waiting_for_specific_animal[chat_id] = True
    elif user_answer.startswith('–Ω–µ—Ç') or user_answer.startswith('–Ω–µ'):
        response = "–£ –º–µ–Ω—è —Ç–æ–∂–µ."
        bot.send_message(chat_id, response)
        waiting_for_animal_answer.pop(chat_id, None)
    else:
        bot.send_message(chat_id, "–ù–µ –ø–æ–Ω—è–ª–∞ —Ç–≤–æ–π –æ—Ç–≤–µ—Ç. –°–∫–∞–∂–∏ –ª–∏–±–æ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")

def process_specific_animal_response(message):
    animal_type = message.text.capitalize()
    chat_id = message.chat.id
    response = f"–ö—Ä—É—Ç–æ, —è –±—ã —Ç–æ–∂–µ —Ö–æ—Ç–µ–ª–∞ –∏–º–µ—Ç—å {animal_type.lower()}!"
    bot.send_message(chat_id, response)
    follow_up_question = f"–ö–∞–∫ –∑–æ–≤—É—Ç —Ç–≤–æ–µ–≥–æ {animal_type.lower()}?"
    bot.send_message(chat_id, follow_up_question)
    waiting_for_specific_animal.pop(chat_id, None)
    waiting_for_animal_name[chat_id] = True

def process_animal_name_response(message):
    pet_name = message.text.capitalize()
    chat_id = message.chat.id
    response = f"–ö–ª–∞—Å—Å–Ω–æ–µ –∏–º—è ‚Äî {pet_name}!"
    bot.send_message(chat_id, response)
    waiting_for_animal_name.pop(chat_id, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî TestBot. –ù–∞—á–Ω–µ–º –Ω–∞—à–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ?",
        reply_markup=create_keyboard(STANDARD_QUESTIONS.keys())
    )

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
ü§ñ **TestBot - –ü–æ–º–æ—â—å**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
‚Ä¢ /restart ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é
‚Ä¢ /games ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∏–≥—Ä

**–ò–≥—Ä—ã:**
üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ (1-100)
üß© –ó–∞–≥–∞–¥–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤

**–û–±—â–µ–Ω–∏–µ:**
–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–µ–±–µ, –º–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å!
    """
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

@bot.message_handler(commands=['games'])
def games_command(message):
    show_games_menu(message)

@bot.message_handler(commands=['restart'])
def restart_command(message):
    chat_id = message.chat.id
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    states_to_clear = [
        waiting_for_name, waiting_for_greeting_response, waiting_for_animal_answer,
        waiting_for_specific_animal, waiting_for_animal_name, waiting_for_user_favorite_game,
        waiting_for_gta_activity, number_game_active, number_game_attempts
    ]
    for state in states_to_clear:
        state.pop(chat_id, None)
    
    bot.send_message(
        chat_id, 
        "üîÑ –°–µ—Å—Å–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞!", 
        reply_markup=create_keyboard(STANDARD_QUESTIONS.keys())
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id
    
    if call.data == "games_menu":
        bot.edit_message_text(
            "üéÆ –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:",
            chat_id,
            call.message.message_id,
            reply_markup=create_inline_keyboard([
                ("üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", "game_number"),
                ("üß© –ó–∞–≥–∞–¥–∫–∏", "game_riddles"),
                ("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_main")
            ])
        )
    
    elif call.data == "game_number":
        bot.edit_message_text(
            "üî¢ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'!",
            chat_id,
            call.message.message_id
        )
        start_number_game(chat_id)
    
    elif call.data == "game_riddles":
        bot.delete_message(chat_id, call.message.message_id)
        show_random_riddle(chat_id)
    
    elif call.data.startswith("riddle_"):
        parts = call.data.split("_")
        chosen_answer = int(parts[1])
        correct_answer = int(parts[2])
        
        if chosen_answer == correct_answer:
            response = "üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–æ!"
        else:
            response = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è!"
        
        bot.edit_message_text(
            f"{call.message.text}\n\n{response}",
            chat_id,
            call.message.message_id,
            reply_markup=create_inline_keyboard([
                ("üîÑ –ï—â—ë –∑–∞–≥–∞–¥–∫—É", "game_riddles"),
                ("üîô –í –º–µ–Ω—é –∏–≥—Ä", "games_menu")
            ])
        )
    
    elif call.data == "normal_chat":
        bot.edit_message_text(
            "üí¨ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å:",
            chat_id,
            call.message.message_id
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=create_keyboard(STANDARD_QUESTIONS.keys())
        )
    
    elif call.data == "back_main":
        bot.edit_message_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî TestBot. –ù–∞—á–Ω–µ–º –Ω–∞—à–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ?",
            chat_id,
            call.message.message_id
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=create_keyboard(STANDARD_QUESTIONS.keys())
        )
    
    bot.answer_callback_query(call.id)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=["text"])
def handle_any_message(message):
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
    if chat_id in number_game_active:
        process_number_guess(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ (–í–ê–ñ–ù–û: —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ü–ï–†–ï–î –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
    if waiting_for_name.get(chat_id, False):
        name = message.text.strip()
        bot.send_message(chat_id, f"–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, {name}! –î–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å?", reply_markup=None)
        waiting_for_name.pop(chat_id, None)
        waiting_for_greeting_response[chat_id] = True
    
    elif waiting_for_greeting_response.get(chat_id, False):
        text = message.text.lower().strip()
        if text in ["–¥–∞–≤–∞–π", "—Ö–æ—Ä–æ—à–æ"]:
            bot.send_message(chat_id, "üòä –£—Ä–∞! –Ø —Ä–∞–¥–∞ –Ω–∞—à–µ–π –¥—Ä—É–∂–±–µ!")
            waiting_for_greeting_response.pop(chat_id, None)
        elif text in ["–Ω–µ—Ç", "–Ω–µ —Ö–æ—á—É", "–Ω–µ —Ö–æ—á—É –¥—Ä—É–∂–∏—Ç—å"]:
            bot.send_message(chat_id, "üôÅ –ñ–∞–ª—å... –ú–æ–∂–µ—Ç, –µ—â—ë –ø–æ–≥–æ–≤–æ—Ä–∏–º –ø–æ–∑–∂–µ?")
            waiting_for_greeting_response.pop(chat_id, None)
        else:
            bot.send_message(chat_id, "–ù–µ –ø–æ–Ω—è–ª–∞ —Ç–≤–æ–π –æ—Ç–≤–µ—Ç. –ù–∞–ø–∏—à–∏ '–¥–∞–≤–∞–π' –∏–ª–∏ '–Ω–µ—Ç'.")
    
    elif waiting_for_user_favorite_game.get(chat_id, False):
        process_user_favorite_game(message)
    elif waiting_for_gta_activity.get(chat_id, False):
        process_gta_activity(message)
    elif waiting_for_animal_answer.get(chat_id, False):
        process_animal_response(message)
    elif waiting_for_specific_animal.get(chat_id, False):
        process_specific_animal_response(message)
    elif waiting_for_animal_name.get(chat_id, False):
        process_animal_name_response(message)
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è)
    elif message.text in STANDARD_QUESTIONS:
        handler = STANDARD_QUESTIONS[message.text]
        if callable(handler):
            handler(message)
            if message.text == "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?":
                waiting_for_name[chat_id] = True
    
    else:
        bot.send_message(
            chat_id,
            "ü§î –¢–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=create_keyboard(STANDARD_QUESTIONS.keys())
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –∏–≥—Ä–∞–º–∏ –∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏!")
bot.polling(non_stop=True)